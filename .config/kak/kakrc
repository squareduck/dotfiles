source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# Colors

colorscheme plastic_duck

# Editing

add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ show-matching

hook global InsertChar \t %{ exec -draft -itersel h@ }
set global tabstop 2
set global indentwidth 2

hook global BufSetOption filetype=rust %{
  set-option buffer formatcmd 'rustfmt'
  set-option buffer tabstop 4
  set-option buffer indentwidth 4
}

define-command find -params 1 -shell-script-candidates %{ rg --files } %{ edit %arg{1} }

map global normal '#' :comment-line<ret> -docstring 'comment line'
map global normal '<a-#>' :comment-block<ret> -docstring 'comment block'

declare-option -docstring "name of the git branch holding the current buffer" \
    str modeline_git_branch

hook global WinCreate .* %{
  hook window NormalIdle .* %{ evaluate-commands %sh{
      branch=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --abbrev-ref HEAD 2>/dev/null)
      if [ -n "${branch}" ]; then
          printf 'set window modeline_git_branch %%{%s}' "${branch}"
      fi
  } }
}

hook global WinCreate .* %{ evaluate-commands %sh{
  is_work_tree=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --is-inside-work-tree 2>/dev/null)
  if [ "${is_work_tree}" = 'true' ]; then
    printf 'set-option window modelinefmt %%{%s}' "%val{bufname} î‚  %opt{modeline_git_branch} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]"
  else
    printf 'set-option window modelinefmt %%{%s}' "%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]"
  fi 
}}

# Clipboard

hook global NormalKey '[ydc]' %{
  nop %sh{
    (printf '%s' "$kak_main_reg_dquote" | xsel --input --clipboard ) < /dev/null > /dev/null 2>&1 &
  }
}

declare-user-mode meta

map global user m ': enter-user-mode meta<ret>' -docstring 'Meta interaction'

map global meta p -docstring 'Paste (After)' '<a-!>wl-paste<ret>'
map global meta P -docstring 'Paste (Before)' '!wl-paste<ret>'
map global meta R -docstring 'Replace' '|wl-paste<ret>'

# Surround

plug "alexherbo2/surround.kak" config %{
  require-module surround

  map global user s ': surround<ret>' -docstring 'surround mode'
  map global user S ': surround _ _ * *<ret>' -docstring 'surround mode with extra surrounding pairs'
}

# Expand

plug "occivink/kakoune-expand" config %{
  map global normal = ': expand<ret>'

  def -params 1 extend-line-down %{
    exec "<a-:>%arg{1}X"
  }

  def -params 1 extend-line-up %{
    exec "<a-:><a-;>%arg{1}K<a-;>"
    try %{
      exec -draft ';<a-K>\n<ret>'
      exec X
    }
    exec '<a-;><a-X>'
  }

  def extend-line-both-ways %{
    exec ':extend-line-up 1<ret>'
    exec ':extend-line-down 1<ret>'
  }

  map global normal + ':extend-line-both-ways<ret>'
  map global normal -- - ':extend-line-down 1<ret>'
  map global normal _ ':extend-line-up 1<ret>'

  declare-user-mode expand
  map global user e ': enter-user-mode expand<ret>' -docstring 'Expand selection'
  map global expand e ': expand<ret>' -docstring "expand"
  map global expand E ': expand; enter-user-mode -lock expand<ret>' -docstring "expand lock"
}

# Pager
plug "eraserhd/kak-ansi"

# Grep

set global grepcmd 'rg --column'
map global user / ':grep ' -docstring 'Grep'

# i3
plug "Delapouite/kakoune-i3" config %{
  require-module x11
  map global user w ': enter-user-mode i3<ret>' -docstring 'i3...'
}

# LSP

plug "ul/kak-lsp" do %{
  cargo build --release --locked
  cargo install --force --path .
} config %{
  set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
  map global user l ': enter-user-mode lsp<ret>' -docstring 'LSP mode'

  set-option global lsp_diagnostic_line_error_sign "!"
  set-option global lsp_diagnostic_line_warning_sign "?"

  define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
  define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
  define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

  define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

  hook global WinSetOption filetype=(ruby|rust|javascript|typescript) %{
      echo -debug "Enabling LSP for filtetype %opt{filetype}"

      lsp-enable-window
      # lsp-auto-hover-enable
      # lsp-auto-hover-insert-mode-disable

      set-option window lsp_hover_anchor true
      set-face window DiagnosticError default+u
      set-face window DiagnosticWarning default+u
  }

  hook global WinSetOption filetype=rust %{
    set-option window lsp_server_configuration rust.clippy_preference="on"
    hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    # hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    # hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
      remove-hooks window rust-inlay-hints
    }
  }


  hook global KakEnd .* lsp-exit
}

# Lint

hook global WinSetOption filetype=ruby %{
    set-option window lintcmd 'run() { cat "$1" | rubocop -s "$kak_buffile"; } && run '
    lint-enable
}

# Crosshairs

plug "insipx/kak-crosshairs" config %{
  set-face global crosshairs_line default,default+bd
  set-face global crosshairs_column default,default+bd
  cursorline
}

# Autopairs

plug "alexherbo2/auto-pairs.kak"

# Easymotion

plug "danr/kakoune-easymotion" config %{
  map global user m ': enter-user-mode easymotion<ret>' -docstring 'Easymotion'
}

# Connect

plug "alexherbo2/prelude.kak" config %{
  require-module prelude
}

plug "alexherbo2/connect.kak" config %{
  require-module connect
  require-module connect-rofi

  declare-user-mode connect

  map global user c ': enter-user-mode connect<ret>' -docstring 'Connect'

  map global connect c ': connect-floating-terminal ' -docstring 'Custom command...'

  define-command connect-floating-terminal -params .. -shell-completion -docstring 'Run connect command in floating terminal window' %{
    $ kitty --class 'utility' -e sh -c %{ "$@" } -- %arg{@}
  }

  define-command connect-fuzzy-files -file-completion -docstring 'Open selected files with skim' %{
    $ kitty --class 'utility' -e sh -c ":edit $(fd . | sk)"
  }
  map global connect f ': connect-fuzzy-files<ret>' -docstring 'Find file'
  map global user f ': connect-fuzzy-files<ret>' -docstring 'Find file'


  define-command connect-fuzzy-buffers -params ..1 -buffer-completion -docstring 'Open selected buffers with sk' %{
    $ kitty --class 'utility' -e sh -c ":buffer $(:ls | sk)"
  }
  map global connect b ': connect-fuzzy-buffers<ret>' -docstring 'Find buffer'
  map global user b ': connect-fuzzy-buffers<ret>' -docstring 'Find buffer'

  define-command connect-lf-current -params .. -file-completion -docstring 'Open files with lf with current file selected' %{
    $ kitty --class 'utility' -e sh -c %{ EDITOR=':edit' lf -command "source $HOME/.config/lf/connectlfrc" "$@" } -- %val{buffile}
  }
  map global connect t ': connect-lf-current<ret>' -docstring 'Explore directory with current file'
  map global user t ': connect-lf-current<ret>' -docstring 'Explore directory with current file'

  define-command connect-lf-root -params .. -file-completion -docstring 'Open files with lf with root directory selected' %{
    $ kitty --class 'utility' -e sh -c %{ EDITOR=':edit' lf -command "source $HOME/.config/lf/connectlfrc" "$(git rev-parse --show-toplevel 2>/dev/null || pwd)" }
  }
  map global connect T ': connect-lf-root<ret>' -docstring 'Explore directory in project root'
  map global user T ': connect-lf-root<ret>' -docstring 'Explore directory in project root'

  define-command connect-tig-current -params .. -file-completion -docstring 'Open files with tig' %{
    $ kitty --class 'utility' -e sh -c %{ EDITOR=':edit' tig "$@" } -- %val{buffile}
  }
  map global connect g ': connect-tig-current<ret>' -docstring 'Open current file in Tig'
  map global user g ': connect-tig-current<ret>' -docstring 'Open current file in Tig'

  define-command connect-tig -params .. -file-completion -docstring 'Open files with tig' %{
    $ kitty --class 'utility' -e sh -c %{ EDITOR=':edit' tig }
  }
  map global connect G ': connect-tig<ret>' -docstring 'Open project in Tig'
  map global user G ': connect-tig<ret>' -docstring 'Open project in Tig'
}
